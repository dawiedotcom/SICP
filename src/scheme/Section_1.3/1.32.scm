; SICP Exercise 1.32
;   Dawie de Klerk
;   2012-08-11

(load "../utils.scm")

(define (accumulate combiner null-value term a next b)
  ;; Reduce with combiner over the series generated by 
  ;; term, a, next and b. 
  (define (iter a result)
    (if (> a b) result
        (iter (next a) (combiner result (term a)))))
  (iter a null-value))

(define (sum term a next b)
  ;; accumulate with + starting with 0
  (accumulate + 0 term a next b))

(define (product term a next b)
  ;; accumulate with * starting with 1
  (accumulate * 1 term a next b))

(define (identity x) x)
(define (inc x) (+ x 1))

;;; Test the new sum and product functions with known input
(println "Sum of 1 to 10 =" (sum identity 1 inc 10))
(println "Product of 1 to 4: 4! =" (product identity 1 inc 4))

(define (accumulate-rec combiner null-value term a next b)
  ;; A recursive alternative to accumulate.
  (if (> a b) null-value
      (combiner a 
                (accumulate-rec combiner 
                                null-value 
                                term 
                                (next a) 
                                next 
                                b))))

;;; Test the new accumulate function with known input
(println "Sum of 1 to 10 =" 
         (accumulate-rec + 0 identity 1 inc 10))
(println "Product of 1 to 4: 4! =" 
         (accumulate-rec * 1 identity 1 inc 4))
