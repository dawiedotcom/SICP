; SICP Exercise 1.33
;   Dawie de Klerk
;   2012-08-11

(load "../utils.scm")
(load "../Section_1.2/1.28.scm")

(define (filtered-accumulate filter combiner null-value term a next b)
  ;; Reduce all the term in the sequence generated by term, a, next
  ;; and b that satisfies the predecate filter.
  (define (iter a result)
    (cond ((> a b) result)
          ((filter a) 
            (iter (next a) (combiner result (term a))))
          (else
            (iter (next a) result))))
  (iter a null-value))

;;; The usual suspects
(define (identity x) x)
(define (inc x) (+ x 1))

(define (sum-even term a next b)
  ;; Sum all the even numbers generated by the sequence
  ;; term a next b
  (filtered-accumulate even? + 0 term a next b))


(define (sum-square-primes a b)
  ;; Calculates the sum of squares of primes between a and b.
  (filtered-accumulate fast-prime? + 0 square a inc b))

(define (product-relative-prime-to n)
  ;; Calculates the product of all the relative primes to n that
  ;; is also smaller than n.
  (define (relative-prime? a)
    (= (gcd n a) 1))
  (filtered-accumulate relative-prime? * 1 identity 2 inc n))

;;; Tests
(println "Sum of even numbers between 1 and 10 =" 
         (sum-even identity 1 inc 10))
(println "Sum of square of primes between 1 and 5 = "
         (sum-square-primes 1 5))
(println "Product of relive primes of 5 ="
         (product-relative-prime-to 5))
(println "Product of relive primes of 6 ="
         (product-relative-prime-to 6))
